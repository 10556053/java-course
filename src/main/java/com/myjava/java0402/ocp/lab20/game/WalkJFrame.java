/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myjava.java0402.ocp.lab20.game;

import javax.swing.ImageIcon;

/**
 *
 * @author student
 */
public class WalkJFrame extends javax.swing.JFrame {
private static String path = "src\\main\\java\\com\\myjava\\java0402\\ocp\\lab20\\game\\fighting_images\\";
    private static ImageIcon[] walk = {
        new ImageIcon(path+"walk_0.png"),
        new ImageIcon(path+"walk_1.png"),
        new ImageIcon(path+"walk_2.png"),
        new ImageIcon(path+"walk_3.png"),
        new ImageIcon(path+"walk_4.png"),
        new ImageIcon(path+"walk_5.png")
    };
     private static ImageIcon[] hah = {
        new ImageIcon(path+"hah_0.png"),
        new ImageIcon(path+"hah_1.png")
    };
    /**
     * Creates new form WalkJFrame
     */
     int Recordx=0,Recordy=0;
     Ready ready = new Ready();
    public WalkJFrame() {
        initComponents();
        ready.start();
    }
class Ready extends Thread{
        boolean isReady = true;
        
        
        @Override
        public void run() {
            for (int i =0;true;i++){
                if(isReady){
                    actor.setIcon(walk[i%walk.length]);
                    int x = actor.getX()+5;
                    int y = actor.getY();
                    Recordx = x;
                    Recordy = y;
                     
                    actor.setLocation(Recordx,Recordy);
                    
                    
                    try {
                        Thread.sleep(180);
                    } catch (Exception e) {
                    }
                    if(i ==Integer.MAX_VALUE){
                        i =0;
                    }
                }else{
                    actor.setIcon(hah[i%hah.length]);
                    actor.setLocation(Recordx,Recordy);
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {
                    }
                    if(i ==Integer.MAX_VALUE){
                        i =0;
                    }
                }
                
            }
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        actor.setText("jLabel1");
        actor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(actor, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(515, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(actor, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actorMouseClicked
        if(evt.getClickCount() ==2){
            ready.isReady=!ready.isReady;
        }
    }//GEN-LAST:event_actorMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WalkJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WalkJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WalkJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WalkJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WalkJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actor;
    // End of variables declaration//GEN-END:variables
}
